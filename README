🍔 JampFoodies – Food Ordering Website

Welcome to JampFoodies, a simple yet functional online food ordering system where users can browse food items, add them to their cart, and place an order 

I have used the following technologies to build this project:
-> PHP
    PHP is used as the backend language to handle logic, connect to the database, process forms, manage sessions, and handle orders.

-> MySQL
    MySQL is the database management system used to store all the data — including categories, food items, customers, orders, and users.

-> HTML
    HTML is used to structure all the web pages like the homepage, menu, cart, and checkout page.


-> CSS
    CSS styles are used to design and improve the appearance of the website.

    Bootstrap classes may be used for responsive layouts and styling.

-> JavaScript (and jQuery)
    JavaScript handles dynamic features like updating the cart, validating forms, and showing real-time updates (e.g., order status).

    jQuery is used to simplify AJAX and DOM manipulation.


-- Database Setup(MYSQL)

-- used mysql workbench to create a database 
CREATE DATABASE jampfoodies;

-- use this create tables 
USE jampfoodies;

CREATE TABLE category(
category_id INT PRIMARY KEY AUTO_INCREMENT,
category_name VARCHAR(100),
category_image VARCHAR(100),
status VARCHAR(50)
);

-- Food table
CREATE TABLE food(
food_id INT PRIMARY KEY AUTO_INCREMENT,
food_name VARCHAR(100),
product_category VARCHAR(100),
food_image VARCHAR(100),
price DECIMAL(10,2),
quantity INT,
description VARCHAR(255),
status VARCHAR(50)
);

-- insert into category table
INSERT INTO category(category_name, category_image, status)
VALUES("Fries", "images/Food_category_67.jpeg", "In Stock"),
("Drinks", "images\Food_15.jpeg", "In Stock"),
("Pizza", "images\Food_68.jpeg", "In Stock");

-- insert into food table
INSERT INTO food(food_name, product_category, food_image, price, quantity, description, status)
VALUES("French Fries", "Fries", "images/Food_34.jpeg", 200, 2, "Fries made with love", "In Stock"),
("Burger King", "Burgers", "images/Food_28.jpg", 200, 1, "3 Burgers + fries", "In Stock"),
("Cocacola", "Drinks", "images/Food_18.jpeg", 100, 30, "Pure Niceness", "In Stock"),
("Pizza Slice Special", "Pizza", "images/Food_69.jpeg", 150, 12, "Slice of wholesome goodness", "In Stock");

-- store custoemer details
CREATE TABLE customers(
	customer_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    full_name VARCHAR(100),
    email VARCHAR(100),
    phone_number VARCHAR(100),
    delivery_address VARCHAR(100)
);

-- store customer cart details
CREATE TABLE shoppingCart(
	cart_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    created_at DATETIME,
    updated_at DATETIME
);

-- store customer cart items
CREATE TABLE cartItems(
	cart_item_id INT PRIMARY KEY AUTO_INCREMENT,
    cart_id INT,
    food_id INT,
    food_name VARCHAR(100),
    food_image VARCHAR(100),
    quantity INT,
    price DECIMAL(10, 2),
    total_price DECIMAL(10, 2),
    created_at DATETIME,
    updated_at DATETIME
);

-- store login details
CREATE TABLE users(
	user_id INT PRIMARY KEY AUTO_INCREMENT,
	full_name VARCHAR(100),
    email VARCHAR(100),
    role VARCHAR(50),
    password VARCHAR(100),
);

-- store order details
CREATE TABLE orders(
	order_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    phone_number VARCHAR(12),
    delivery_address VARCHAR(255),
    total_amount DECIMAL(10, 2),
    payment_status VARCHAR(100),
    payment_method ENUM('Mpesa', 'Cash'),
    order_status VARCHAR(100),
	created_at DATETIME,
    updated_at TIMESTAMP
);

CREATE TABLE orderItems(
	order_item_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    food_id INT,
    food_name VARCHAR(100),
    food_image VARCHAR(100),
    quantity INT,
    price DECIMAL(10, 2),
    total_price DECIMAL(10, 2)
);

## 📦 Database Setup

1. Open **MySQL Workbench**
2. Create a new schema named `jampfoodies`
3. Go to **File > Open SQL Script** and choose `jampfoodies.sql`
4. Run the script to import all the tables and sample data

-- how it works
1. one can use the home page to handle everthing in the website
2. it works for both logged in and non-logged in users
3. one can add items to the cart and place an order
4. Items added to cart are stored in the database.
5. Checkout page collects delivery info and payment method.
6. i have designed the fucntionality to work until the checkout page and then it redirects you back to the home page.

-- how to run the project
1. Clone the repository to your local machine.
2. Import the jampfoodies SQL schema into MySQL Workbench.
3. Update the database connection details in the config.php file.
4. Run the app on XAMPP or any PHP server.
5. Start exploring 